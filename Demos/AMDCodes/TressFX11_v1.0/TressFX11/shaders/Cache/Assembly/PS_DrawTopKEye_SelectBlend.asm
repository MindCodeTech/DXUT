//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
//   fxc /T ps_5_0 /O1 /E PS_DrawTopKEye_SelectBlend
//    shaders\Source\kbuffer.hlsl /Fo
//    Shaders\Cache\Object\Release\PS_DrawTopKEye_SelectBlend.obj /Fe
//    Shaders\Cache\Error\PS_DrawTopKEye_SelectBlend.txt /Fc
//    Shaders\Cache\Assembly\PS_DrawTopKEye_SelectBlend.asm
//
//
// Buffer Definitions: 
//
// cbuffer cbPerFrame
// {
//
//   float4x4 g_mWorld;                 // Offset:    0 Size:    64 [unused]
//   float4x4 g_mViewProj;              // Offset:   64 Size:    64 [unused]
//   float4x4 g_mInvViewProj;           // Offset:  128 Size:    64 [unused]
//   float4x4 g_mViewProjLight;         // Offset:  192 Size:    64 [unused]
//   float3 g_vEye;                     // Offset:  256 Size:    12 [unused]
//   float g_fvFov;                     // Offset:  268 Size:     4 [unused]
//   float4 g_AmbientLightColor;        // Offset:  272 Size:    16 [unused]
//   float4 g_PointLightColor;          // Offset:  288 Size:    16 [unused]
//   float4 g_PointLightPos;            // Offset:  304 Size:    16 [unused]
//   float4 g_MatBaseColor;             // Offset:  320 Size:    16 [unused]
//   float4 g_MatKValue;                // Offset:  336 Size:    16 [unused]
//   float g_FiberAlpha;                // Offset:  352 Size:     4 [unused]
//   float g_HairShadowAlpha;           // Offset:  356 Size:     4 [unused]
//   float g_bExpandPixels;             // Offset:  360 Size:     4 [unused]
//   float g_FiberRadius;               // Offset:  364 Size:     4 [unused]
//   float g_fHairKs2;                  // Offset:  368 Size:     4 [unused]
//   float g_fHairEx2;                  // Offset:  372 Size:     4 [unused]
//   float2 g_WinSize;                  // Offset:  376 Size:     8
//   float g_FiberSpacing;              // Offset:  384 Size:     4 [unused]
//   float g_bThinTip;                  // Offset:  388 Size:     4 [unused]
//   float g_fNearLight;                // Offset:  392 Size:     4 [unused]
//   float g_fFarLight;                 // Offset:  396 Size:     4 [unused]
//   int g_iTechSM;                     // Offset:  400 Size:     4 [unused]
//   int g_bUseCoverage;                // Offset:  404 Size:     4 [unused]
//   int g_bUseAltCoverage;             // Offset:  408 Size:     4 [unused]
//   int g_iStrandCopies;               // Offset:  412 Size:     4 [unused]
//
// }
//
// Resource bind info for EyeFragmentSRV
// {
//
//   struct Eye_Fragment_STRUCT
//   {
//       
//       uint uPixelColor;              // Offset:    0
//       uint uDepthAndCoverage;        // Offset:    4
//       uint uNext;                    // Offset:    8
//
//   } $Element;                        // Offset:    0 Size:    12
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// EyeRefSRV                         texture    uint         buf    0        1
// EyeFragmentSRV                    texture  struct         r/o    1        1
// cbPerFrame                        cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// SV_POSITION              0   xyzw        0      POS  float   xy  
// TEXCOORD                 0   xy          1     NONE  float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// SV_Target                0   xyzw        0   TARGET  float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | forceEarlyDepthStencil
dcl_constantbuffer cb0[24], immediateIndexed
dcl_resource_buffer (uint,uint,uint,uint) t0
dcl_resource_structured t1, 12 
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 8
dcl_indexableTemp x0[8], 4
ftou r0.xy, v0.yxyy
utof r0.xy, r0.xyxx
mad r0.x, cb0[23].z, r0.x, r0.y
ftou r0.x, r0.x
ld_indexable(buffer)(uint,uint,uint,uint) r0.x, r0.xxxx, t0.xyzw
ine r0.y, r0.x, l(-1)
ld_structured_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r0.xzw, r0.x, l(0), t1.xxyz
movc r0.xyz, r0.yyyy, r0.zxwz, l(-1,0,-1,0)
mov x0[0].xy, r0.xyxx
ine r0.x, r0.z, l(-1)
ld_structured_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r0.yzw, r0.z, l(0), t1.xxyz
movc r0.xyz, r0.xxxx, r0.zywz, l(-1,0,-1,0)
mov x0[1].xy, r0.xyxx
ine r0.x, r0.z, l(-1)
ld_structured_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r0.yzw, r0.z, l(0), t1.xxyz
movc r0.xyz, r0.xxxx, r0.zywz, l(-1,0,-1,0)
mov x0[2].xy, r0.xyxx
ine r0.x, r0.z, l(-1)
ld_structured_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r0.yzw, r0.z, l(0), t1.xxyz
movc r0.xyz, r0.xxxx, r0.zywz, l(-1,0,-1,0)
mov x0[3].xy, r0.xyxx
ine r0.x, r0.z, l(-1)
ld_structured_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r0.yzw, r0.z, l(0), t1.xxyz
movc r0.xyz, r0.xxxx, r0.zywz, l(-1,0,-1,0)
mov x0[4].xy, r0.xyxx
ine r0.x, r0.z, l(-1)
ld_structured_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r0.yzw, r0.z, l(0), t1.xxyz
movc r0.xyz, r0.xxxx, r0.zywz, l(-1,0,-1,0)
mov x0[5].xy, r0.xyxx
ine r0.x, r0.z, l(-1)
ld_structured_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r0.yzw, r0.z, l(0), t1.xxyz
movc r0.xyz, r0.xxxx, r0.zywz, l(-1,0,-1,0)
mov x0[6].xy, r0.xyxx
ine r0.x, r0.z, l(-1)
ld_structured_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r0.yzw, r0.z, l(0), t1.xxyz
movc r0.xyz, r0.xxxx, r0.zywz, l(-1,0,-1,0)
mov x0[7].xy, r0.xyxx
mov r1.xz, l(0,0,1,0)
mov r2.xz, l(2,0,3,0)
mov r3.xz, l(4,0,5,0)
mov r4.xz, l(6,0,7,0)
mov r0.xyw, l(0,0,0,0)
mov r5.x, l(1.000000)
mov r5.w, r0.z
mov r6.x, l(0)
loop 
  ige r6.y, r6.x, l(768)
  breakc_nz r6.y
  ieq r6.y, r5.w, l(-1)
  if_nz r6.y
    break 
  endif 
  ld_structured_indexable(structured_buffer, stride=12)(mixed,mixed,mixed,mixed) r5.yzw, r5.w, l(0), t1.xxyz
  mov r1.y, x0[0].x
  ult r6.y, l(0), r1.y
  and r6.yz, r1.xxyx, r6.yyyy
  mov r1.w, x0[1].x
  ult r1.y, r6.z, r1.w
  movc r1.yw, r1.yyyy, r1.zzzw, r6.yyyz
  mov r2.y, x0[2].x
  ult r6.y, r1.w, r2.y
  movc r1.yw, r6.yyyy, r2.xxxy, r1.yyyw
  mov r2.w, x0[3].x
  ult r2.y, r1.w, r2.w
  movc r1.yw, r2.yyyy, r2.zzzw, r1.yyyw
  mov r3.y, x0[4].x
  ult r2.y, r1.w, r3.y
  movc r1.yw, r2.yyyy, r3.xxxy, r1.yyyw
  mov r3.w, x0[5].x
  ult r2.y, r1.w, r3.w
  movc r1.yw, r2.yyyy, r3.zzzw, r1.yyyw
  mov r4.y, x0[6].x
  ult r2.y, r1.w, r4.y
  movc r1.yw, r2.yyyy, r4.xxxy, r1.yyyw
  mov r4.w, x0[7].x
  ult r2.y, r1.w, r4.w
  movc r1.yw, r2.yyyy, r4.zzzw, r1.yyyw
  ult r1.w, r5.z, r1.w
  if_nz r1.w
    mov r1.w, x0[r1.y + 0].y
    mov x0[r1.y + 0].xy, r5.zyzz
    mov r5.y, r1.w
  endif 
  ushr r1.y, r5.y, l(24)
  utof r1.y, r1.y
  mul r7.x, r1.y, l(0.003922)
  ubfe r1.yw, l(0, 8, 0, 8), l(0, 16, 0, 8), r5.yyyy
  utof r1.yw, r1.yyyw
  mul r7.yz, r1.yywy, l(0.000000, 0.003922, 0.003922, 0.000000)
  and r1.y, r5.y, l(255)
  utof r1.y, r1.y
  mul r1.w, r1.y, l(0.003922)
  mad r1.y, -r1.y, l(0.003922), l(1.000000)
  mul r6.yzw, r1.wwww, r7.xxyz
  mad r0.xyw, r0.xyxw, r1.yyyy, r6.yzyw
  mul r5.x, r1.y, r5.x
  iadd r6.x, r6.x, l(1)
endloop 
mov r1.xz, l(0,0,1,0)
mov r2.xz, l(2,0,3,0)
mov r3.xz, l(4,0,5,0)
mov r4.x, l(6)
mov r5.yzw, r0.xxyw
mov r0.z, r5.x
mov r4.z, l(0)
loop 
  ige r4.w, r4.z, l(8)
  breakc_nz r4.w
  mov r1.y, x0[0].x
  ult r4.w, l(0), r1.y
  and r6.xy, r1.xyxx, r4.wwww
  mov r1.w, x0[1].x
  ult r1.y, r6.y, r1.w
  movc r1.yw, r1.yyyy, r1.zzzw, r6.xxxy
  mov r2.y, x0[2].x
  ult r4.w, r1.w, r2.y
  movc r1.yw, r4.wwww, r2.xxxy, r1.yyyw
  mov r2.w, x0[3].x
  ult r2.y, r1.w, r2.w
  movc r1.yw, r2.yyyy, r2.zzzw, r1.yyyw
  mov r3.y, x0[4].x
  ult r2.y, r1.w, r3.y
  movc r1.yw, r2.yyyy, r3.xxxy, r1.yyyw
  mov r3.w, x0[5].x
  ult r2.y, r1.w, r3.w
  movc r1.yw, r2.yyyy, r3.zzzw, r1.yyyw
  mov r4.y, x0[6].x
  ult r2.y, r1.w, r4.y
  movc r1.yw, r2.yyyy, r4.xxxy, r1.yyyw
  mov r2.y, x0[7].x
  ult r1.w, r1.w, r2.y
  movc r1.y, r1.w, l(7), r1.y
  mov x0[r1.y + 0].x, l(0)
  mov r1.y, x0[r1.y + 0].y
  ushr r1.w, r1.y, l(24)
  utof r1.w, r1.w
  mul r6.x, r1.w, l(0.003922)
  ubfe r2.yw, l(0, 8, 0, 8), l(0, 16, 0, 8), r1.yyyy
  utof r2.yw, r2.yyyw
  mul r6.yz, r2.yywy, l(0.000000, 0.003922, 0.003922, 0.000000)
  and r1.y, r1.y, l(255)
  utof r1.y, r1.y
  mul r1.w, r1.y, l(0.003922)
  mad r1.y, -r1.y, l(0.003922), l(1.000000)
  mul r6.xyz, r1.wwww, r6.xyzx
  mad r5.yzw, r5.yyzw, r1.yyyy, r6.xxyz
  mul r0.z, r0.z, r1.y
  iadd r4.z, r4.z, l(1)
endloop 
mov o0.xyz, r5.yzwy
mov o0.w, r0.z
ret 
// Approximately 152 instruction slots used
