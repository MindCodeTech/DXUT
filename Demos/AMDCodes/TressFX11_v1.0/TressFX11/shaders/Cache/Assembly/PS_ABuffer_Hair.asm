//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
//   fxc /T ps_5_0 /O1 /E PS_ABuffer_Hair shaders\Source\kbuffer.hlsl /Fo
//    Shaders\Cache\Object\Release\PS_ABuffer_Hair.obj /Fe
//    Shaders\Cache\Error\PS_ABuffer_Hair.txt /Fc
//    Shaders\Cache\Assembly\PS_ABuffer_Hair.asm
//
//
// Buffer Definitions: 
//
// cbuffer cbPerFrame
// {
//
//   float4x4 g_mWorld;                 // Offset:    0 Size:    64 [unused]
//   float4x4 g_mViewProj;              // Offset:   64 Size:    64
//   float4x4 g_mInvViewProj;           // Offset:  128 Size:    64
//   float4x4 g_mViewProjLight;         // Offset:  192 Size:    64
//   float3 g_vEye;                     // Offset:  256 Size:    12
//   float g_fvFov;                     // Offset:  268 Size:     4
//   float4 g_AmbientLightColor;        // Offset:  272 Size:    16
//   float4 g_PointLightColor;          // Offset:  288 Size:    16
//   float4 g_PointLightPos;            // Offset:  304 Size:    16
//   float4 g_MatBaseColor;             // Offset:  320 Size:    16
//   float4 g_MatKValue;                // Offset:  336 Size:    16
//   float g_FiberAlpha;                // Offset:  352 Size:     4
//   float g_HairShadowAlpha;           // Offset:  356 Size:     4
//   float g_bExpandPixels;             // Offset:  360 Size:     4 [unused]
//   float g_FiberRadius;               // Offset:  364 Size:     4
//   float g_fHairKs2;                  // Offset:  368 Size:     4
//   float g_fHairEx2;                  // Offset:  372 Size:     4
//   float2 g_WinSize;                  // Offset:  376 Size:     8
//   float g_FiberSpacing;              // Offset:  384 Size:     4
//   float g_bThinTip;                  // Offset:  388 Size:     4
//   float g_fNearLight;                // Offset:  392 Size:     4
//   float g_fFarLight;                 // Offset:  396 Size:     4
//   int g_iTechSM;                     // Offset:  400 Size:     4
//   int g_bUseCoverage;                // Offset:  404 Size:     4
//   int g_bUseAltCoverage;             // Offset:  408 Size:     4
//   int g_iStrandCopies;               // Offset:  412 Size:     4 [unused]
//
// }
//
// Resource bind info for EyeFragmentUAV
// {
//
//   struct Eye_Fragment_STRUCT
//   {
//       
//       uint uPixelColor;              // Offset:    0
//       uint uDepthAndCoverage;        // Offset:    4
//       uint uNext;                    // Offset:    8
//
//   } $Element;                        // Offset:    0 Size:    12
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_samLinearWrap                   sampler      NA          NA    0        1
// g_samPointClamp                   sampler      NA          NA    1        1
// g_samShadow                     sampler_c      NA          NA    2        1
// g_txSMScene                       texture  float4          2d    2        1
// g_txSMHair                        texture  float4          2d    3        1
// g_txNoise                         texture  float4          2d    5        1
// EyeRefUAV                             UAV    byte         r/w    1        1
// EyeFragmentUAV                        UAV  struct     r/w+cnt    2        1
// cbPerFrame                        cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// SV_POSITION              0   xyzw        0      POS  float   xy  
// Tangent                  0   xyz         1     NONE  float   xyz 
// TEXCOORD                 0   xyzw        2     NONE  float   xyz 
// TEXCOORD                 1   xyz         3     NONE  float   xyz 
// TEXCOORD                 2   xyz         4     NONE  float   xyz 
// TEXCOORD                 3   xyz         5     NONE  float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// SV_Target                0   xyzw        0   TARGET  float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | forceEarlyDepthStencil
dcl_constantbuffer cb0[26], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_comparison
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t5
dcl_uav_raw u1
dcl_uav_structured_opc u2, 12
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyz
dcl_output o0.xyzw
dcl_temps 5
ieq r0.x, cb0[25].x, l(2)
if_nz r0.x
  mov r0.xyz, v3.xyzx
  mov r0.w, l(1.000000)
  dp4 r1.x, r0.xyzw, cb0[12].xyzw
  dp4 r1.y, r0.xyzw, cb0[13].xyzw
  dp4 r1.z, r0.xyzw, cb0[14].xyzw
  dp4 r0.x, r0.xyzw, cb0[15].xyzw
  div r0.yw, r1.xxxz, r0.xxxx
  add r2.x, r0.y, l(1.000000)
  div r0.y, -r1.y, r0.x
  add r2.y, r0.y, l(1.000000)
  mul r0.yz, r2.xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
  mul r0.w, r0.w, l(0.990000)
  sample_c_lz_indexable(-1,-1,0)(texture2d)(float,float,float,float) r1.x, r0.yzyy, t2.xxxx, s2, r0.w
  sample_l_indexable(-1,-1,0)(texture2d)(float,float,float,float) r1.y, r0.yzyy, t3.yxzw, s1, l(0.000000)
  add r1.z, -cb0[24].z, cb0[24].w
  mul r1.y, r1.z, r1.y
  div r1.y, r1.y, cb0[24].w
  add r1.y, -r1.y, l(1.000000)
  div r1.y, cb0[24].z, r1.y
  add r1.y, r0.x, -r1.y
  max r1.y, r1.y, l(0.000000)
  mul r1.w, cb0[22].w, cb0[24].x
  div r2.x, r1.y, r1.w
  lt r1.y, l(0.000010), r1.y
  add r2.y, r2.x, l(1.000000)
  movc r1.y, r1.y, r2.y, r2.x
  add r2.x, l(1.000000), -cb0[22].y
  log r2.x, |r2.x|
  mul r1.y, r1.y, r2.x
  exp r1.y, r1.y
  sample_c_lz_indexable(-1,0,0)(texture2d)(float,float,float,float) r2.y, r0.yzyy, t2.xxxx, s2, r0.w
  mul r2.y, r2.y, l(0.113283)
  mad r1.x, r1.x, l(0.031497), r2.y
  sample_l_indexable(-1,0,0)(texture2d)(float,float,float,float) r2.y, r0.yzyy, t3.yxzw, s1, l(0.000000)
  mul r2.y, r1.z, r2.y
  div r2.y, r2.y, cb0[24].w
  add r2.y, -r2.y, l(1.000000)
  div r2.y, cb0[24].z, r2.y
  add r2.y, r0.x, -r2.y
  max r2.y, r2.y, l(0.000000)
  div r2.z, r2.y, r1.w
  lt r2.y, l(0.000010), r2.y
  add r2.w, r2.z, l(1.000000)
  movc r2.y, r2.y, r2.w, r2.z
  mul r2.y, r2.x, r2.y
  exp r2.y, r2.y
  mul r2.y, r2.y, l(0.113283)
  mad r1.y, r1.y, l(0.031497), r2.y
  sample_c_lz_indexable(-1,1,0)(texture2d)(float,float,float,float) r2.y, r0.yzyy, t2.xxxx, s2, r0.w
  mad r1.x, r2.y, l(0.031497), r1.x
  sample_l_indexable(-1,1,0)(texture2d)(float,float,float,float) r2.y, r0.yzyy, t3.yxzw, s1, l(0.000000)
  mul r2.y, r1.z, r2.y
  div r2.y, r2.y, cb0[24].w
  add r2.y, -r2.y, l(1.000000)
  div r2.y, cb0[24].z, r2.y
  add r2.y, r0.x, -r2.y
  max r2.y, r2.y, l(0.000000)
  div r2.z, r2.y, r1.w
  lt r2.y, l(0.000010), r2.y
  add r2.w, r2.z, l(1.000000)
  movc r2.y, r2.y, r2.w, r2.z
  mul r2.y, r2.x, r2.y
  exp r2.y, r2.y
  mad r1.y, r2.y, l(0.031497), r1.y
  sample_c_lz_indexable(0,-1,0)(texture2d)(float,float,float,float) r2.y, r0.yzyy, t2.xxxx, s2, r0.w
  mad r1.x, r2.y, l(0.113283), r1.x
  sample_l_indexable(0,-1,0)(texture2d)(float,float,float,float) r2.y, r0.yzyy, t3.yxzw, s1, l(0.000000)
  mul r2.y, r1.z, r2.y
  div r2.y, r2.y, cb0[24].w
  add r2.y, -r2.y, l(1.000000)
  div r2.y, cb0[24].z, r2.y
  add r2.y, r0.x, -r2.y
  max r2.y, r2.y, l(0.000000)
  div r2.z, r2.y, r1.w
  lt r2.y, l(0.000010), r2.y
  add r2.w, r2.z, l(1.000000)
  movc r2.y, r2.y, r2.w, r2.z
  mul r2.y, r2.x, r2.y
  exp r2.y, r2.y
  mad r1.y, r2.y, l(0.113283), r1.y
  sample_c_lz_indexable(0,0,0)(texture2d)(float,float,float,float) r2.y, r0.yzyy, t2.xxxx, s2, r0.w
  mad r1.x, r2.y, l(0.407437), r1.x
  sample_l_indexable(0,0,0)(texture2d)(float,float,float,float) r2.y, r0.yzyy, t3.yxzw, s1, l(0.000000)
  mul r2.y, r1.z, r2.y
  div r2.y, r2.y, cb0[24].w
  add r2.y, -r2.y, l(1.000000)
  div r2.y, cb0[24].z, r2.y
  add r2.y, r0.x, -r2.y
  max r2.y, r2.y, l(0.000000)
  div r2.z, r2.y, r1.w
  lt r2.y, l(0.000010), r2.y
  add r2.w, r2.z, l(1.000000)
  movc r2.y, r2.y, r2.w, r2.z
  mul r2.y, r2.x, r2.y
  exp r2.y, r2.y
  mad r1.y, r2.y, l(0.407437), r1.y
  sample_c_lz_indexable(0,1,0)(texture2d)(float,float,float,float) r2.y, r0.yzyy, t2.xxxx, s2, r0.w
  mad r1.x, r2.y, l(0.113283), r1.x
  sample_l_indexable(0,1,0)(texture2d)(float,float,float,float) r2.y, r0.yzyy, t3.yxzw, s1, l(0.000000)
  mul r2.y, r1.z, r2.y
  div r2.y, r2.y, cb0[24].w
  add r2.y, -r2.y, l(1.000000)
  div r2.y, cb0[24].z, r2.y
  add r2.y, r0.x, -r2.y
  max r2.y, r2.y, l(0.000000)
  div r2.z, r2.y, r1.w
  lt r2.y, l(0.000010), r2.y
  add r2.w, r2.z, l(1.000000)
  movc r2.y, r2.y, r2.w, r2.z
  mul r2.y, r2.x, r2.y
  exp r2.y, r2.y
  mad r1.y, r2.y, l(0.113283), r1.y
  sample_c_lz_indexable(1,-1,0)(texture2d)(float,float,float,float) r2.y, r0.yzyy, t2.xxxx, s2, r0.w
  mad r1.x, r2.y, l(0.031497), r1.x
  sample_l_indexable(1,-1,0)(texture2d)(float,float,float,float) r2.y, r0.yzyy, t3.yxzw, s1, l(0.000000)
  mul r2.y, r1.z, r2.y
  div r2.y, r2.y, cb0[24].w
  add r2.y, -r2.y, l(1.000000)
  div r2.y, cb0[24].z, r2.y
  add r2.y, r0.x, -r2.y
  max r2.y, r2.y, l(0.000000)
  div r2.z, r2.y, r1.w
  lt r2.y, l(0.000010), r2.y
  add r2.w, r2.z, l(1.000000)
  movc r2.y, r2.y, r2.w, r2.z
  mul r2.y, r2.x, r2.y
  exp r2.y, r2.y
  mad r1.y, r2.y, l(0.031497), r1.y
  sample_c_lz_indexable(1,0,0)(texture2d)(float,float,float,float) r2.y, r0.yzyy, t2.xxxx, s2, r0.w
  mad r1.x, r2.y, l(0.113283), r1.x
  sample_l_indexable(1,0,0)(texture2d)(float,float,float,float) r2.y, r0.yzyy, t3.yxzw, s1, l(0.000000)
  mul r2.y, r1.z, r2.y
  div r2.y, r2.y, cb0[24].w
  add r2.y, -r2.y, l(1.000000)
  div r2.y, cb0[24].z, r2.y
  add r2.y, r0.x, -r2.y
  max r2.y, r2.y, l(0.000000)
  div r2.z, r2.y, r1.w
  lt r2.y, l(0.000010), r2.y
  add r2.w, r2.z, l(1.000000)
  movc r2.y, r2.y, r2.w, r2.z
  mul r2.y, r2.x, r2.y
  exp r2.y, r2.y
  mad r1.y, r2.y, l(0.113283), r1.y
  sample_c_lz_indexable(1,1,0)(texture2d)(float,float,float,float) r0.w, r0.yzyy, t2.xxxx, s2, r0.w
  mad r0.w, r0.w, l(0.031497), r1.x
  sample_l_indexable(1,1,0)(texture2d)(float,float,float,float) r0.y, r0.yzyy, t3.yxzw, s1, l(0.000000)
  mul r0.y, r1.z, r0.y
  div r0.y, r0.y, cb0[24].w
  add r0.y, -r0.y, l(1.000000)
  div r0.y, cb0[24].z, r0.y
  add r0.x, -r0.y, r0.x
  max r0.x, r0.x, l(0.000000)
  div r0.y, r0.x, r1.w
  lt r0.x, l(0.000010), r0.x
  add r0.z, r0.y, l(1.000000)
  movc r0.x, r0.x, r0.z, r0.y
  mul r0.x, r2.x, r0.x
  exp r0.x, r0.x
  mad r0.x, r0.x, l(0.031497), r1.y
  mul r0.y, r0.x, l(1.013629)
  mul r0.x, r0.w, l(1.013629)
else 
  mov r0.xy, l(1.000000,1.000000,0,0)
endif 
add r0.z, |v2.y|, |v2.x|
lt r0.z, l(0.000010), r0.z
if_nz r0.z
  sample_l_indexable(texture2d)(float,float,float,float) r0.z, v2.xyxx, t5.yzxw, s0, l(0.000000)
else 
  mov r0.z, l(1.000000)
endif 
if_nz cb0[25].y
  mad r0.w, -cb0[23].z, l(0.500000), v0.x
  add r0.w, r0.w, r0.w
  div r1.x, r0.w, cb0[23].z
  mad r0.w, cb0[23].w, l(0.500000), -v0.y
  add r0.w, r0.w, r0.w
  div r1.y, r0.w, cb0[23].w
  if_nz cb0[25].z
    mul r2.xy, v5.xyxx, cb0[23].zwzz
    mul r2.zw, r1.xxxy, cb0[23].zzzw
    mad r3.xy, v4.xyxx, cb0[23].zwzz, -r2.zwzz
    dp2 r0.w, r3.xyxx, r3.xyxx
    sqrt r0.w, r0.w
    mad r2.zw, v5.xxxy, cb0[23].zzzw, -r2.zzzw
    dp2 r2.z, r2.zwzz, r2.zwzz
    mad r2.xy, v4.xyxx, cb0[23].zwzz, -r2.xyxx
    dp2 r2.x, r2.xyxx, r2.xyxx
    sqrt r2.xz, r2.xxzx
    ge r2.y, r0.w, r2.x
    ge r2.x, r2.z, r2.x
    and r3.xy, r2.yxyy, l(0x3f800000, 0x3f800000, 0, 0)
    dp2 r2.x, r3.xyxx, r3.xyxx
    ne r2.x, r2.x, l(0.000000)
    movc r2.x, r2.x, l(-1.000000), l(1.000000)
    min r0.w, r0.w, r2.z
    min r0.w, r0.w, l(1.000000)
    mad r0.w, r2.x, r0.w, l(1.000000)
    mul r0.w, r0.w, l(0.500000)
  else 
    mov r1.zw, l(0,0,1.000000,1.000000)
    dp4 r2.x, r1.xyww, cb0[8].xyzw
    dp4 r2.y, r1.xyww, cb0[9].xyzw
    dp4 r2.z, r1.xyww, cb0[10].xyzw
    dp4 r1.x, r1.xyzw, cb0[11].xyzw
    div r1.xyz, r2.xyzx, r1.xxxx
    add r1.xyz, r1.xyzx, -cb0[16].xyzx
    dp3 r1.w, r1.xyzx, r1.xyzx
    rsq r1.w, r1.w
    mul r1.xyz, r1.wwww, r1.xyzx
    lt r1.w, l(0.000000), cb0[24].y
    movc r1.w, r1.w, v2.z, l(1.000000)
    add r2.xyz, -v4.zxyz, v5.zxyz
    dp3 r2.w, r2.xyzx, r2.xyzx
    rsq r2.w, r2.w
    mul r2.xyz, r2.wwww, r2.xyzx
    mul r3.xyz, r1.xyzx, r2.xyzx
    mad r1.xyz, r1.zxyz, r2.yzxy, -r3.xyzx
    dp3 r2.w, r1.xyzx, r1.xyzx
    rsq r3.x, r2.w
    mul r1.xyz, r1.xyzx, r3.xxxx
    sqrt r2.w, r2.w
    add r3.xyz, v4.yzxy, -cb0[16].yzxy
    dp3 r3.w, r3.xyzx, r1.xyzx
    mad r1.xyz, -r1.xyzx, r3.wwww, r3.xyzx
    dp3 r3.x, r1.xyzx, r1.xyzx
    rsq r3.y, r3.x
    mul r1.xyz, r1.xyzx, r3.yyyy
    sqrt r3.x, r3.x
    mul r4.xyz, -r1.xyzx, r2.xyzx
    mad r1.xyz, r2.zxyz, -r1.yzxy, -r4.xyzx
    dp3 r1.x, r1.xyzx, r1.xyzx
    sqrt r1.x, r1.x
    mul r1.x, r3.x, r1.x
    div r1.x, r1.x, r2.w
    lt r1.y, l(0.000000), r1.x
    add r1.x, r1.x, r1.x
    mul r1.z, l(0.500000), cb0[16].w
    sincos r2.x, r3.x, r1.z
    div r1.z, r2.x, r3.x
    mul r1.x, r1.z, r1.x
    div r1.x, r1.x, cb0[23].w
    mul r2.xy, r1.xxxx, l(0.500000, -0.500000, 0.000000, 0.000000)
    mad r1.z, r1.w, cb0[22].w, r3.w
    min r1.z, r1.z, r2.x
    mad r1.w, -r1.w, cb0[22].w, r3.w
    max r1.w, r1.w, r2.y
    add r1.z, -r1.w, r1.z
    max r1.z, r1.z, l(0.000000)
    div r1.x, r1.z, r1.x
    and r0.w, r1.x, r1.y
  endif 
  mul r0.w, r0.w, cb0[22].x
else 
  mov r0.w, cb0[22].x
endif 
lt r1.x, l(0.003882), r0.w
if_nz r1.x
  mul r0.x, r0.y, r0.x
  mov_sat r1.xyz, cb0[20].xyzx
  add r2.xyz, -v3.xyzx, cb0[19].xyzx
  dp3 r0.y, r2.xyzx, r2.xyzx
  rsq r0.y, r0.y
  mul r2.xyz, r0.yyyy, r2.xyzx
  add r3.xyz, -v3.xyzx, cb0[16].xyzx
  dp3 r0.y, r3.xyzx, r3.xyzx
  rsq r0.y, r0.y
  mul r3.xyz, r0.yyyy, r3.xyzx
  dp3 r0.y, v1.xyzx, v1.xyzx
  rsq r0.y, r0.y
  mul r4.xyz, r0.yyyy, v1.xyzx
  dp3 r0.y, r4.xyzx, r2.xyzx
  mad r1.w, -r0.y, r0.y, l(1.000000)
  sqrt r1.w, r1.w
  dp3 r2.x, r4.xyzx, r3.xyzx
  mad r2.y, -r2.x, r2.x, l(1.000000)
  mul r2.zw, r0.zzzz, l(0.000000, 0.000000, 0.349066, -0.523599)
  sincos r3.x, r4.x, r2.z
  mul r0.z, r1.w, r3.x
  mad r0.z, -r0.y, r4.x, -r0.z
  mad r2.z, -r0.z, r0.z, l(1.000000)
  sqrt r2.yz, r2.yyzy
  mul r2.z, r2.y, r2.z
  mad r0.z, r0.z, r2.x, r2.z
  sincos r3.x, r4.x, r2.w
  mul r2.z, r1.w, r3.x
  mad r0.y, -r0.y, r4.x, -r2.z
  mad r2.z, -r0.y, r0.y, l(1.000000)
  sqrt r2.z, r2.z
  mul r2.y, r2.y, r2.z
  mad r0.y, r0.y, r2.x, r2.y
  max r0.yz, r0.yyzy, l(0.000000, 0.000000, 0.000000, 0.000000)
  mul r2.xyz, cb0[17].xyzx, cb0[21].xxxx
  mul r3.xyz, r0.xxxx, cb0[18].xyzx
  mul r0.x, r1.w, cb0[21].y
  log r0.z, r0.z
  mul r0.z, r0.z, cb0[21].w
  exp r0.z, r0.z
  mul r0.z, r0.z, cb0[21].z
  mad r4.xyz, r0.xxxx, r1.xyzx, r0.zzzz
  log r0.x, r0.y
  mul r0.x, r0.x, cb0[23].y
  exp r0.x, r0.x
  mul r0.x, r0.x, cb0[23].x
  mad r0.xyz, r0.xxxx, r1.xyzx, r4.xyzx
  mul r0.xyz, r0.xyzx, r3.xyzx
  mad r0.xyz, r2.xyzx, r1.xyzx, r0.xyzx
  mov r1.xyz, v3.xyzx
  mov r1.w, l(1.000000)
  dp4 r2.x, r1.xyzw, cb0[6].xyzw
  dp4 r1.x, r1.xyzw, cb0[7].xyzw
  div r1.x, r2.x, r1.x
  ftou r1.yz, v0.yyxy
  imm_atomic_alloc r2.x, u2
  utof r1.yz, r1.yyzy
  mad r1.y, cb0[23].z, r1.y, r1.z
  mul r1.y, r1.y, l(4.000000)
  ftou r1.y, r1.y
  imm_atomic_exch r3.z, u1, r1.y, r2.x
  mul r0.xyz, r0.xyzx, l(255.000000, 255.000000, 255.000000, 0.000000)
  ftou r0.xyz, r0.xyzx
  bfi r0.yz, l(0, 8, 8, 0), l(0, 16, 8, 0), r0.yyzy, l(0, 0, 0, 0)
  bfi r0.x, l(8), l(24), r0.x, r0.y
  iadd r0.x, r0.z, r0.x
  mul r0.y, r0.w, l(255.000000)
  ftou r0.y, r0.y
  bfi r3.x, l(8), l(0), r0.y, r0.x
  mul r0.x, r1.x, l(16777215.000000)
  ftou r0.x, r0.x
  ishl r3.y, r0.x, l(8)
  store_structured u2.xyz, r2.x, l(0), r3.xyzx
endif 
mov o0.xyzw, l(1.000000,0,0,0)
ret 
// Approximately 337 instruction slots used
