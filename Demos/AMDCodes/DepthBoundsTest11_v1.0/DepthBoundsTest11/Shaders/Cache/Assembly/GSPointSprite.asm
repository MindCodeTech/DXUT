//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
//   fxc /T gs_5_0 /O1 /E GSPointSprite Shaders\source\Particle.hlsl /Fo
//    Shaders\Cache\Object\Release\GSPointSprite.obj /Fe
//    Shaders\Cache\Error\GSPointSprite.txt /Fc
//    Shaders\Cache\Assembly\GSPointSprite.asm
//
//
// Buffer Definitions: 
//
// cbuffer cbMain
// {
//
//   float4x4 g_mView;                  // Offset:    0 Size:    64 [unused]
//   float4x4 g_mProjection;            // Offset:   64 Size:    64 [unused]
//   float4x4 g_mViewProjection;        // Offset:  128 Size:    64
//   float4x4 g_mInvView;               // Offset:  192 Size:    64
//   float4x4 g_mInvViewProjectionViewport;// Offset:  256 Size:    64 [unused]
//   float4x4 g_mWorld;                 // Offset:  320 Size:    64 [unused]
//   float4 g_vEye;                     // Offset:  384 Size:    16 [unused]
//   float4 g_vCameraViewVector;        // Offset:  400 Size:    16 [unused]
//   float4 g_vScreenResolution;        // Offset:  416 Size:    16 [unused]
//   float4 g_vLightPosition;           // Offset:  432 Size:    16 [unused]
//   float4 g_vLightDiffuse;            // Offset:  448 Size:    16 [unused]
//   float4 g_vLightAmbient;            // Offset:  464 Size:    16 [unused]
//   float g_ShowDiscardedPixels;       // Offset:  480 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// cbMain                            cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// POSITION                 0   xyz         0     NONE  float   xyz 
// RADIUS                   0      w        0     NONE  float      w
// COLOR                    0   xyzw        1     NONE  float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// m0:PARTICLEPOSITION      0   xyzw        0     NONE  float   xyzw
// m0:TEXCOORD              0   xy          1     NONE  float   xy  
// m0:COLOR                 0   xyzw        2     NONE  float   xyzw
// m0:SV_POSITION           0   xyzw        3      POS  float   xyzw
//
gs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[15], immediateIndexed
dcl_input v[1][0].xyz
dcl_input v[1][0].w
dcl_input v[1][1].xyzw
dcl_temps 3
dcl_inputprimitive point 
dcl_stream m0
dcl_outputtopology trianglestrip 
dcl_output o0.xyzw
dcl_output o1.xy
dcl_output o2.xyzw
dcl_output_siv o3.xyzw, position
dcl_maxout 4
mov o0.xyzw, v[0][0].xyzw
mov o1.xy, l(0,1.000000,0,0)
mov o2.xyzw, v[0][1].xyzw
mov r0.w, l(1.000000)
mul r1.xy, l(1.000000, -1.000000, 0.000000, 0.000000), v[0][0].wwww
dp2 r2.x, r1.yxyy, cb0[12].xyxx
dp2 r2.y, r1.yxyy, cb0[13].xyxx
dp2 r2.z, r1.yxyy, cb0[14].xyxx
add r0.xyz, r2.xyzx, v[0][0].xyzx
dp4 r1.z, r0.xyzw, cb0[8].xyzw
mov o3.x, r1.z
dp4 r1.z, r0.xyzw, cb0[9].xyzw
mov o3.y, r1.z
dp4 r1.z, r0.xyzw, cb0[10].xyzw
dp4 r0.x, r0.xyzw, cb0[11].xyzw
mov o3.z, r1.z
mov o3.w, r0.x
emit_stream m0
mov o0.xyzw, v[0][0].xyzw
mov o1.xy, l(1.000000,1.000000,0,0)
mov o2.xyzw, v[0][1].xyzw
dp2 r0.x, r1.xxxx, cb0[12].xyxx
dp2 r0.y, r1.xxxx, cb0[13].xyxx
dp2 r0.z, r1.xxxx, cb0[14].xyxx
add r0.xyz, r0.xyzx, v[0][0].xyzx
mov r0.w, l(1.000000)
dp4 r1.z, r0.xyzw, cb0[8].xyzw
mov o3.x, r1.z
dp4 r1.z, r0.xyzw, cb0[9].xyzw
mov o3.y, r1.z
dp4 r1.z, r0.xyzw, cb0[10].xyzw
dp4 r0.x, r0.xyzw, cb0[11].xyzw
mov o3.z, r1.z
mov o3.w, r0.x
emit_stream m0
mov o0.xyzw, v[0][0].xyzw
mov o1.xy, l(0,0,0,0)
mov o2.xyzw, v[0][1].xyzw
dp2 r0.x, r1.yyyy, cb0[12].xyxx
dp2 r0.y, r1.yyyy, cb0[13].xyxx
dp2 r0.z, r1.yyyy, cb0[14].xyxx
add r0.xyz, r0.xyzx, v[0][0].xyzx
mov r0.w, l(1.000000)
dp4 r1.z, r0.xyzw, cb0[8].xyzw
mov o3.x, r1.z
dp4 r1.z, r0.xyzw, cb0[9].xyzw
mov o3.y, r1.z
dp4 r1.z, r0.xyzw, cb0[10].xyzw
dp4 r0.x, r0.xyzw, cb0[11].xyzw
mov o3.z, r1.z
mov o3.w, r0.x
emit_stream m0
mov o0.xyzw, v[0][0].xyzw
mov o1.xy, l(1.000000,0,0,0)
mov o2.xyzw, v[0][1].xyzw
dp2 r0.x, r1.xyxx, cb0[12].xyxx
dp2 r0.y, r1.xyxx, cb0[13].xyxx
dp2 r0.z, r1.xyxx, cb0[14].xyxx
add r0.xyz, r0.xyzx, v[0][0].xyzx
mov r0.w, l(1.000000)
dp4 r1.x, r0.xyzw, cb0[8].xyzw
mov o3.x, r1.x
dp4 r1.x, r0.xyzw, cb0[9].xyzw
mov o3.y, r1.x
dp4 r1.x, r0.xyzw, cb0[10].xyzw
dp4 r0.x, r0.xyzw, cb0[11].xyzw
mov o3.z, r1.x
mov o3.w, r0.x
emit_stream m0
cut_stream m0
ret 
// Approximately 71 instruction slots used
