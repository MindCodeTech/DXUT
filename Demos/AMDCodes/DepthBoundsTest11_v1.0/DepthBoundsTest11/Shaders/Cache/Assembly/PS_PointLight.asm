//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
//   fxc /T ps_5_0 /O1 /E PS_PointLight Shaders\source\ShadingPasses.hlsl /Fo
//    Shaders\Cache\Object\Release\PS_PointLight.obj /Fe
//    Shaders\Cache\Error\PS_PointLight.txt /Fc
//    Shaders\Cache\Assembly\PS_PointLight.asm
//
//
// Buffer Definitions: 
//
// cbuffer cbMain
// {
//
//   float4x4 g_mView;                  // Offset:    0 Size:    64 [unused]
//   float4x4 g_mProjection;            // Offset:   64 Size:    64 [unused]
//   float4x4 g_mViewProjection;        // Offset:  128 Size:    64 [unused]
//   float4x4 g_mInvView;               // Offset:  192 Size:    64 [unused]
//   float4x4 g_mInvViewProjectionViewport;// Offset:  256 Size:    64
//   float4x4 g_mWorld;                 // Offset:  320 Size:    64 [unused]
//   float4 g_vEye;                     // Offset:  384 Size:    16
//   float4 g_vCameraViewVector;        // Offset:  400 Size:    16 [unused]
//   float4 g_vScreenResolution;        // Offset:  416 Size:    16 [unused]
//   float4 g_vLightPosition;           // Offset:  432 Size:    16 [unused]
//   float4 g_vLightDiffuse;            // Offset:  448 Size:    16 [unused]
//   float4 g_vLightAmbient;            // Offset:  464 Size:    16 [unused]
//   float g_ShowDiscardedPixels;       // Offset:  480 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// txGBuffer0                        texture  float4          2d    0        1
// txGBuffer1                        texture  float4          2d    1        1
// txDepthBuffer                     texture  float4          2d    2        1
// cbMain                            cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// LIGHTPOSITIONANDRANGE     0   xyzw        0     NONE  float   xyzw
// LIGHTCOLOR               0   xyz         1     NONE  float   xyz 
// SV_POSITION              0   xyzw        2      POS  float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// SV_TARGET                0   xyzw        0   TARGET  float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[31], immediateIndexed
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps constant v0.xyzw
dcl_input_ps constant v1.xyz
dcl_input_ps_siv linear noperspective v2.xy, position
dcl_output o0.xyzw
dcl_temps 5
ftoi r0.xy, v2.xyxx
mov r0.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r1.z, r0.xyww, t2.yzxw
mov r1.xy, v2.xyxx
mov r1.w, l(1.000000)
dp4 r2.x, r1.xyzw, cb0[16].xyzw
dp4 r2.y, r1.xyzw, cb0[17].xyzw
dp4 r2.z, r1.xyzw, cb0[18].xyzw
dp4 r1.x, r1.xyzw, cb0[19].xyzw
div r1.xyz, r2.xyzx, r1.xxxx
add r2.xyz, -r1.xyzx, v0.xyzx
dp3 r1.w, r2.xyzx, r2.xyzx
sqrt r2.w, r1.w
div r2.w, r2.w, v0.w
mul r2.w, r2.w, r2.w
mad r2.w, -r2.w, r2.w, l(1.000000)
max r2.w, r2.w, l(0.000000)
eq r3.x, r2.w, l(0.000000)
if_nz r3.x
  ne r3.x, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[30].x
  if_nz r3.x
    mov o0.xyzw, l(0.030000,0,0.030000,0)
    ret 
  else 
    discard l(-1)
  endif 
endif 
ne r3.x, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[30].x
if_nz r3.x
  mov o0.xyzw, l(0,0,0,0)
  ret 
endif 
ld_indexable(texture2d)(float,float,float,float) r3.xyzw, r0.xyww, t0.xyzw
ld_indexable(texture2d)(float,float,float,float) r0.xyz, r0.xyzw, t1.xyzw
mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
rsq r0.w, r1.w
mul r2.xyz, r0.wwww, r2.xyzx
dp3 r0.w, r0.xyzx, r2.xyzx
mov_sat r1.w, r0.w
lt r4.x, l(0.000000), r1.w
add r1.xyz, r1.xyzx, -cb0[24].xyzx
dp3 r4.y, r1.xyzx, r1.xyzx
rsq r4.y, r4.y
mul r1.xyz, r1.xyzx, r4.yyyy
add r0.w, r0.w, r0.w
mad r0.xyz, r0.xyzx, -r0.wwww, r2.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
dp3_sat r0.x, r0.xyzx, r1.xyzx
log r0.x, r0.x
mul r0.x, r0.x, l(16.000000)
exp r0.x, r0.x
and r0.x, r0.x, r4.x
mul r0.x, r3.w, r0.x
mad r0.xyz, r1.wwww, r3.xyzx, r0.xxxx
mul r0.xyz, r0.xyzx, v1.xyzx
mul o0.xyz, r2.wwww, r0.xyzx
mov o0.w, l(0)
ret 
// Approximately 60 instruction slots used
